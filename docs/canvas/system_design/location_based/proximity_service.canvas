{
	"nodes":[
		{"id":"b8719c84360160fb","type":"text","text":"proximity service\n**YELP**","x":-460,"y":-120,"width":220,"height":60},
		{"id":"137529f77f582245","type":"text","text":"#### Requirements\n1.  business should be able to create their business profile\n2.  users should be able to create user profile\n3. users be able to search — **zip, city, location, lat/lng**\n4. should be able to see business details\n5. should be able to rate / review the business","x":-20,"y":-360,"width":560,"height":240},
		{"id":"13d7e2bf48277c8e","type":"text","text":"#### API Details\n1. POST v1/businesses\n2. PUT v1/businesses/{b_id}\n3. GET v1/businesses/{b_id}\n4. DELETE v1/businesses/{b_id}\n5. GET v1/search/<lat,lng,radius>","x":-20,"y":-40,"width":460,"height":220},
		{"id":"39bbd9a2252ebd79","type":"text","text":"#### Business Creation\n1. business_service","x":-20,"y":291,"width":288,"height":89},
		{"id":"7c40a1aafb8648ae","type":"text","text":"##### Business Table \n- business_id\n- name\n- address\n\t- street\n\t- city\n\t- zip\n\t- lat/lng\n- contact_info","x":660,"y":160,"width":320,"height":320},
		{"id":"4cff0bc5f07d10e6","type":"text","text":"##### Geo Hash Table \n- business_id: PK\n\t- can't make geo_hash as PK, because multiple business_id will have same geo_hash\n- geo_hash: GSI\n###### Which Database?\n- Postgres with PostGIS extension\n- Geohash in Redis","x":640,"y":552,"width":460,"height":348},
		{"id":"50a5656934296d10","type":"text","text":"##### What is GEO HASHING?\n\n| Concept            | Description                                                              |\n| ------------------ | ------------------------------------------------------------------------ |\n| What is Geohash    | Encodes latitude and longitude into a compact Base32 string              |\n| Grid Division      | Recursively divides Earth into quadrants using binary space partitioning |\n| Precision          | Each added character increases precision (smaller bounding box)          |\n| Proximity Property | Nearby locations share a common geohash prefix                           |\n| Encoding Base      | Custom Base32: \"0123456789bcdefghjkmnpqrstuvwxyz\" (excludes a, i, l, o)  |\n\n\n","x":1400,"y":539,"width":740,"height":341,"color":"5"},
		{"id":"cbd053c2a3173a25","type":"text","text":"##### Quad Tree\n- Note that **quadtree is an in-memory data** structure and it is not a database solution.\n- Location contents (businesses) are split into 4 quads such that size of each quad is < K (ex: k = 100)\n- 4 quadrants are **NW, NE, SW, SE**\n- This way, if **density is high**, we have **more depth** (more nested quads)\n- If **density is low**, we don't need to **split any further**\n- Traverse from root ➙ leaf until search location is found\n\t- If businesses are < N, collect more businesses from neighboring nodes\n\n","x":1380,"y":1961,"width":760,"height":319},
		{"id":"bf0bc0ff127ab2aa","type":"text","text":"##### DEEP DIVE\n\n| Step                    | Value / Explanation                                            |\n| ----------------------- | -------------------------------------------------------------- |\n| Input Coordinate        | 37.7749, -122.4194 (San Francisco)                             |\n| Initial Bounds          | Latitude: [-90, +90], Longitude: [-180, +180]                  |\n| Encoding Process        | Alternate splitting lon/lat, assigning bits (0/1) per quadrant |\n| Example Bits            | 11101 01010 11100 ...                                          |\n| Base32 Alphabet         | \"0123456789bcdefghjkmnpqrstuvwxyz\"                             |\n| Geohash (5 chars)       | `9q8zn`                                                        |\n| Area Covered (Length 5) | ~4.9 km × 4.9 km at equator                                    |\n| More Characters         | Increases precision by shrinking the bounding box              |\n","x":2680,"y":401,"width":640,"height":414,"color":"4"},
		{"id":"7b4f2172438529ca","type":"text","text":"| Issue                  | Summary                                                           |\n| ---------------------- | ----------------------------------------------------------------- |\n| Edge Inaccuracy        | Nearby points across cell edges can have very different geohashes |\n| Poor for Radius Search | Square grid ≠ circular radius → leads to over/under-inclusion     |\n| Uneven Resolution      | Latitude and longitude bits alternate → asymmetric cell shapes    |\n| Polar Distortion       | Grid sizes shrink drastically near the poles                      |\n\n##### Resolutions\n1. For edge inaccuracy, loading nearby grids can be done in constant time using libraries \n\t- Essentially they load nearby grid by computing delta values to add to lat/lng and compute hash again\n2. For other issues, recommendation is to use Uber's H3 or Google's S2 which is better for spherical searches ","x":2680,"y":1036,"width":680,"height":500,"color":"1"},
		{"id":"5cd6b6595c389d6a","type":"file","file":"docs/canvas/images/geo_hash_5_quad_tree.png","x":2680,"y":1894,"width":720,"height":540},
		{"id":"0d21cb7950e4ccaa","type":"text","text":"#### Business Loading\n1. search_service","x":-31,"y":908,"width":299,"height":102},
		{"id":"1e2f768ceef7b97e","type":"text","text":"- Give a location, identify the geo-hash for the location (using library)\n- load_by_geohash_gsi(geo-hash)\n- if businness is empty, \n\t- identify neighbor geo-hashes\n\t- load_by_geohash_GSI(for other neighbor hashses)","x":497,"y":1010,"width":646,"height":170},
		{"id":"4fc966db698055ae","type":"file","file":"docs/canvas/images/geo_hash_1_quads.png","x":3960,"y":300,"width":400,"height":308},
		{"id":"e9b544a9514afe09","type":"file","file":"docs/canvas/images/geo_hash_2_hashing.png","x":3960,"y":725,"width":400,"height":311},
		{"id":"253e19bc7e2d455d","type":"file","file":"docs/canvas/images/geo_hash_3_boundary_issue.png","x":3960,"y":1136,"width":386,"height":400},
		{"id":"cf752a6ff6affdbf","type":"file","file":"docs/canvas/images/geo_hash_4_boundary_issue_2.png","x":3960,"y":1738,"width":399,"height":312},
		{"id":"c00fc7cd460c6e8e","type":"text","text":"proximity service\n**NEARBY-FRIENDS**","x":-500,"y":1520,"width":260,"height":100},
		{"id":"a72c6e21974946ab","type":"text","text":"Requirements","x":-46,"y":1389,"width":250,"height":60},
		{"id":"598ad654fecf6ffc","type":"text","text":"- POST v1/update_location/{user_id}\n\t- lat/lng\n- GET v1/nearby_friends/{user_id, lat/lng}","x":336,"y":1680,"width":404,"height":100},
		{"id":"444ac0d3f8964ae9","type":"text","text":"- find near by friends within 5 miles\n- only if they're active for X minutes","x":343,"y":1298,"width":391,"height":91},
		{"id":"22610b6a06267907","type":"text","text":"- low latency\n- 100M DAU\n- 10M GPS updates / sec","x":343,"y":1449,"width":399,"height":111},
		{"id":"f8ced7bdfb57f948","type":"text","text":"API","x":-46,"y":1700,"width":250,"height":60},
		{"id":"f3d82ec6540d6a8f","type":"text","text":"HLD","x":-57,"y":1896,"width":250,"height":60},
		{"id":"df587c5c3ca165c5","type":"text","text":"- location_service\n\t- locations_table\n\t\t- user_id\n\t\t- lat/lng\n\t\t- geo_hash: GSI\n- friends_service\n\t- friends_table\n\t\t- user_id\n\t\t- friend_user_id","x":340,"y":1800,"width":440,"height":307},
		{"id":"a2fe3ec125d56f1d","type":"text","text":"Deep Dive","x":-66,"y":2077,"width":250,"height":60},
		{"id":"d2d52b187d2ce7c7","type":"text","text":"1. Publishing\n\t1. location_events are queued in kafka\n\t2. partitioned by user_id\n2. Consuming\n\t1. location_workers reads events\n\t2. computes geo-hash\n\t3. updates **locations_table**\n\t4. locations history stored through CDC pipeline\n3. Searching\n\t1. User comes online \n\t2. User websocket connection to backend\n\t3. Get all user friends for users own geo-hash\n\t\t1. load_by_user_id_and_geo_hash\n\t\t2. filter and rank\n4. Stream-Real time location\n\t1. Upon user coming online\n\t\t1. MY location updates — Setup redis pub-sub\n\t\t\t1. pub their location\n\t\t\t2. load their online friends and subscribe this user to their websocket\n\t\t\t\t1. now their location is being received by online users\n\t\t\t3. subscribe to ALL online user's pub-sub channel\n\t\t\t\t1. now friends location can be recieved by ME\n\n> [!tip] NOTE: Redis pub/sub server **broadcasts the location update** to all subscribers. Meaning, it's push-based, unlike Kafka pub-sub which is pull-based by subscriber\n","x":340,"y":2220,"width":680,"height":760},
		{"id":"35865c9dd75cd7b1","type":"file","file":"docs/canvas/images/nearby_friends_redis_pub-sb.png","x":1120,"y":2369,"width":726,"height":442}
	],
	"edges":[
		{"id":"5912db8617e7661c","fromNode":"b8719c84360160fb","fromSide":"right","toNode":"137529f77f582245","toSide":"left"},
		{"id":"e01c39e6a6f1b2ef","fromNode":"b8719c84360160fb","fromSide":"right","toNode":"13d7e2bf48277c8e","toSide":"left"},
		{"id":"db6373f4c220fd6f","fromNode":"b8719c84360160fb","fromSide":"right","toNode":"39bbd9a2252ebd79","toSide":"left"},
		{"id":"d58db61b2e8852dc","fromNode":"39bbd9a2252ebd79","fromSide":"right","toNode":"7c40a1aafb8648ae","toSide":"left"},
		{"id":"97ab05a95b832c45","fromNode":"b8719c84360160fb","fromSide":"right","toNode":"0d21cb7950e4ccaa","toSide":"left"},
		{"id":"f5141aa631c5d96e","fromNode":"39bbd9a2252ebd79","fromSide":"right","toNode":"4cff0bc5f07d10e6","toSide":"left"},
		{"id":"576e73c5f581d4bc","fromNode":"4cff0bc5f07d10e6","fromSide":"right","toNode":"50a5656934296d10","toSide":"left","label":"geo-hash"},
		{"id":"2093175bba994dfe","fromNode":"50a5656934296d10","fromSide":"right","toNode":"bf0bc0ff127ab2aa","toSide":"left","label":"How it's done?"},
		{"id":"8be4ece7f3291a5e","fromNode":"bf0bc0ff127ab2aa","fromSide":"right","toNode":"4fc966db698055ae","toSide":"left"},
		{"id":"3fadac906eabc4a8","fromNode":"bf0bc0ff127ab2aa","fromSide":"right","toNode":"e9b544a9514afe09","toSide":"left"},
		{"id":"f1e69daf76d1fa42","fromNode":"50a5656934296d10","fromSide":"right","toNode":"7b4f2172438529ca","toSide":"left","label":"Issues with geo-hashing"},
		{"id":"cc5239455ee53615","fromNode":"7b4f2172438529ca","fromSide":"right","toNode":"253e19bc7e2d455d","toSide":"left","label":"boundary issue — 1"},
		{"id":"894f3d137980c9f9","fromNode":"7b4f2172438529ca","fromSide":"right","toNode":"cf752a6ff6affdbf","toSide":"left","label":"boundary issue — 2"},
		{"id":"5f0609be2f014d6f","fromNode":"4cff0bc5f07d10e6","fromSide":"right","toNode":"cbd053c2a3173a25","toSide":"left","label":"quad-tree"},
		{"id":"4f1ce069dd973fd3","fromNode":"cbd053c2a3173a25","fromSide":"right","toNode":"5cd6b6595c389d6a","toSide":"left"},
		{"id":"823af128536847b4","fromNode":"0d21cb7950e4ccaa","fromSide":"right","toNode":"4cff0bc5f07d10e6","toSide":"left"},
		{"id":"4efb9d9bba0c3020","fromNode":"0d21cb7950e4ccaa","fromSide":"right","toNode":"1e2f768ceef7b97e","toSide":"left"},
		{"id":"3c834125b881db67","fromNode":"c00fc7cd460c6e8e","fromSide":"right","toNode":"a72c6e21974946ab","toSide":"left"},
		{"id":"6af08dc45c958552","fromNode":"a72c6e21974946ab","fromSide":"right","toNode":"444ac0d3f8964ae9","toSide":"left"},
		{"id":"3b956af06ecec7d2","fromNode":"a72c6e21974946ab","fromSide":"right","toNode":"22610b6a06267907","toSide":"left"},
		{"id":"4898374d8c7f5267","fromNode":"c00fc7cd460c6e8e","fromSide":"right","toNode":"f8ced7bdfb57f948","toSide":"left"},
		{"id":"a0812907040f57a0","fromNode":"f8ced7bdfb57f948","fromSide":"right","toNode":"598ad654fecf6ffc","toSide":"left"},
		{"id":"23deac83a39a1c69","fromNode":"c00fc7cd460c6e8e","fromSide":"right","toNode":"f3d82ec6540d6a8f","toSide":"left"},
		{"id":"0f9681630503de8f","fromNode":"f3d82ec6540d6a8f","fromSide":"right","toNode":"df587c5c3ca165c5","toSide":"left"},
		{"id":"01d9c3c350968174","fromNode":"c00fc7cd460c6e8e","fromSide":"right","toNode":"a2fe3ec125d56f1d","toSide":"left"},
		{"id":"d9ba7d31ba26e85e","fromNode":"a2fe3ec125d56f1d","fromSide":"right","toNode":"d2d52b187d2ce7c7","toSide":"left"},
		{"id":"dcc9d70fd208bc0d","fromNode":"d2d52b187d2ce7c7","fromSide":"right","toNode":"35865c9dd75cd7b1","toSide":"left"}
	]
}