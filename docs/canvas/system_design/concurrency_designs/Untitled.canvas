{
	"nodes":[
		{"id":"0cd39dcf9bd64bd3","type":"text","text":"# System Design Log Writer\nMulti-threaded system where each thread needs to push data to a file. The focus is on low latency, high throughput, and recovery from server crashes.\n\nThreads continuously call a push method, appending bytes to a file on disk.\nDesign and implement pseudocode to ensure:\nThread-level ordering: For example, if Thread_A pushes d1 and d2, and Thread_B pushes d3 and d4, the file content can be either d1_d2_d3_d4 or d1_d3_d4_d2, but d1 must precede d2, and d3 must precede d4.\nHigh throughput and low latency: Threads should not block or wait unnecessarily during push calls.\nDemonstrate how byte data is appended to the disk file.\nDiscuss persistence and recovery strategies in case of a server crash.","x":-390,"y":-351,"width":850,"height":371},
		{"id":"eca1c97057d2bfed","type":"text","text":"```python\nimport asyncio\n\nwrite_lock = asycio.Lock()\nclass MyFile(file_path):\n\tdef __init__(self, file_path):\n\t\tself.file_path = file_path\n\t\twith open(self.file_path, 'w') as f:\n\t\t\tpass\n\n\tasync def push(data_bytes, write_lock):\n\t\tasync with write_lock:\n\t\t\tasync with open(self.file_path, 'a') as f:\n\t\t\t\tawait f.write(data_bytes)\n\nasync def multiwrite(total):\n\tmyfile = MyFile('/Users/nodofox/Desktop/some_file.txt')\n\tcoros = [myfile.push(i) for i in range(total)]\n\tawait asyncio.gather(coro)\n\nasync def main():\n\tasyncio.run(multiwrite(10))\n\n```","x":620,"y":280,"width":664,"height":395},
		{"id":"8f0c9b0536feefe1","type":"text","text":"```python\n\nimport threading\n\nclass LogWriter:\n\tdef __init__(self, file_path, file_lock):\n\t\tself.file_path = file_path\n\t\tself.file_lock = file_lock\n\t\twith open(self.file_path, 'w') as f:\n\t\t\tpass\n\n\tdef push(self, data):\n\t\twith self.file_lock:\n\t\t\twith open(self.file_path, 'a') as f:\n\t\t\t\tf.write(data)\n\ndef write_to_file(log, data_list):\n\tfor data in data_list:\n\t\tlog.push(data)\n\t\n\nlock = threading.Lock()\nlog = LogWriter('Users/nodofox/src/test_files/log_file.txt', lock)\nthreads = []\nfor batch in [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]:\n\tthreads.append(threading.Thread(log, batch))\n\tthreads[-1].start()\n\nthreading.join_all(threads)\n\n```","x":-261,"y":343,"width":861,"height":637},
		{"id":"2932bf250d90cb96","x":-267,"y":1160,"width":647,"height":220,"type":"text","text":"# Python Threading Module"}
	],
	"edges":[
		{"id":"1ab52fb3dab83cd3","fromNode":"0cd39dcf9bd64bd3","fromSide":"bottom","toNode":"eca1c97057d2bfed","toSide":"top"},
		{"id":"b71a7a0896d4d7bb","fromNode":"0cd39dcf9bd64bd3","fromSide":"bottom","toNode":"8f0c9b0536feefe1","toSide":"top"}
	]
}