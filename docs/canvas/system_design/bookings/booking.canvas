{
	"nodes":[
		{"id":"a3f47a8673c65b41","type":"text","text":"# Airbnb System Design Requirements\n\n## Host Management\n- Hosts can create multiple property listings\n- Each listing includes the full property address\n- Hosts can mark specific dates as unavailable (calendar is available by default)\n- Hosts review and approve booking requests\n- Hosts have 24 hours to respond to booking requests before they expire\n\n## Guest Experience\n- Guests can search for properties by city and date range\n- Guests can view available properties matching their search criteria\n- Guests can select a property and request to book specific dates\n- Guests cannot request dates that have pending booking requests from other guests\n\n## Booking System\n- Properties are unavailable for booking while a request is pending\n- Pending bookings expire after 24 hours if not approved by the host\n- Expired booking requests automatically release the dates back to available status\n- The system prevents overlapping pending booking requests for the same dates\n- Approved bookings permanently block those dates from further requests\n\n## Out of Scope\n- Payment processing\n- Advanced search filters\n- User authentication and profiles\n- Reviews and ratings\n- Messaging between hosts and guests","x":-1040,"y":520,"width":700,"height":955},
		{"id":"af9902203e41e833","type":"text","text":"# Telehealth System Design Requirements\n\n## Providers\n- Providers (doctors) can list themselves and put their available slots for patients to book.\n- The slots can be of 30 mins or 60 mins slots, but providers should be able to select a range of time slots within a day. ex: The UX should look like they select a date, and then highlight range of time, say 9 am to 5 pm. They would also be able to select up to 6 months in advance, not beyond that. They should also be able to select months, and time range applied to all selected dates, as some providers are available all days from 9 to 5 (as an example).\n- Providers can update the available slots anytime\n- Providers should be able to see bookings in their name from the members (patients)\n- Multiple bookings are allowed for the same slot, and provider can approve only ONE of them. \n- The rest of the bookings are auto-declined \n\n## Members\n- Members should be able to search for providers — by date range, which gives them a list of providers available for these date ranges. \n- Members should be able to select the available time slots for booking, and submit for booking\n- Members should be able to see their own bookings with status \"PENDING\", \"APPROVED\", \"DECLINED\"\n\n## Constraints\n- A slot can be booked by many members as long as it is not \"APPROVED\" by the Provider. However if a slot is approved, it should no longer be able to be selected for booking\n- A slot should not be double approved — meaning, a slot can only be approved for a single member request\n- Could be 100k providers, 10m daily active members.","x":70,"y":510,"width":750,"height":965},
		{"id":"d079fdf874013b12","type":"text","text":"# Appointment Booking System\nThere are two kinds of appointment booking system. \n1. Range of available dates, Range booking\n\t1. Airbnb\n2. Range of available dates, Single booking \n\t1. Telehealth, Salon, Meeting Rooms","x":-420,"y":-360,"width":700,"height":282},
		{"id":"206bdf1846fc79aa","type":"text","text":"# Queries\n## Show listings\n- select all properties\n\t- between some \"start\" and \"end\"\n\t- minus properties which has booking overlap for some \"start\" and \"end\"\n\t- order by X, limit 10, offset 20;\n## Book a Property\n- create booking \n\t- where no booking exists with start and end overlap for given \"start\" and \"end\"","x":-1040,"y":2280,"width":697,"height":400},
		{"id":"fbfa7de512c517c9","type":"text","text":"# Table summarizing different strategies for modeling availability, including the merging aspect:\n\n## Data Availability Modeling Strategies\n\n| Use Case / Example             | Resource Type                                  | Availability Granularity | Primary Storage Strategy                                     | Merging/Splitting Logic (When to Apply)                                                                                                | Key Reason / Benefit                                                                         | Query Focus                                                                | Potential Challenges                                                                                                |\n| :----------------------------- | :--------------------------------------------- | :----------------------- | :----------------------------------------------------------- | :------------------------------------------------------------------------------------------------------------------------------------- | :------------------------------------------------------------------------------------------- | :------------------------------------------------------------------------- | :------------------------------------------------------------------------------------------------------------------ |\n| **Airbnb (Specific Listing)**  | Non-Fungible (Unique Property)                 | Full Day / Night         | **Store Unavailability Ranges** (Bookings, Owner Blocks)     | No direct \"merging of availability.\" Unavailability records (bookings, blocks) are distinct. Splitting an owner block might occur if a booking is made within it. | Default is available. Explicitly mark when *not* available. Simpler for distinct blocking events. | \"Is this specific listing available from `YYYY-MM-DD` to `YYYY-MM-DD`?\"      | Overlapping blocks, min/max stay rules, calendar sync with external services.                                       |\n| **Airbnb (Specific Listing)**  | Non-Fungible (Unique Property)                 | Full Day / Night         | **Store Availability Ranges** (Less common, but possible)    | **YES, MERGE.** When a new available period is added that is contiguous or overlaps an existing *available* range, merge them into one. When unavailability is added, *split* existing available ranges. | Provides a direct view of available blocks. Can simplify \"find available dates\" queries.      | \"What are all available date ranges for this listing?\" / \"Is it available from X to Y?\" | More complex writes (merging/splitting). Data can become fragmented if not managed well.                     |\n| **Hotel (Room Type)**          | Fungible (e.g., \"Standard Queen\")              | Full Day / Night         | **Store Daily Inventory Counts** (e.g., `resource_type_id`, `date`, `available_count`) | N/A for merging ranges. Decrement/increment `available_count` for each day of a booking/cancellation.                                  | Efficient for managing many identical units. Price can vary daily.                          | \"Are `N` rooms of type `X` available from `YYYY-MM-DD` to `YYYY-MM-DD`?\"     | Overselling, managing holds, dynamic pricing, ensuring contiguous availability for the entire stay.               |\n| **Car Rentals (Car Category)** | Fungible (e.g., \"Compact Car\" at a location) | Full Day                 | **Store Daily Inventory Counts** (e.g., `category_id`, `location_id`, `date`, `available_count`) | N/A for merging ranges. Decrement/increment `available_count`.                                                                        | Handles pools of similar resources at different locations.                                 | \"Is a car of category `Y` available from `date1` to `date2` at location `Z`?\" | Location-specific inventory, one-way rentals, managing fleet maintenance.                                       |\n| **Telehealth (Specific Doctor)**| Non-Fungible (Specific Person)                 | Time Slot (e.g., 15/30/60 min) | **Define Working Schedules + Store Bookings (as Unavailability)** | N/A for merging. Bookings consume time from the schedule. Availability is calculated by finding gaps in schedule vs bookings.         | Flexible for complex recurring schedules, breaks, and exceptions.                            | \"What slots are available for Dr. `X` on `YYYY-MM-DD`?\" / \"Next available for Dr. `X`?\" | Timezone handling, varying service durations, buffer times, recurring appointments, provider overrides.             |\n| **Telehealth (Specific Doctor)**| Non-Fungible (Specific Person)                 | Time Slot (e.g., 15/30/60 min) | **Pre-generate & Store Available Slots** (`slot_start_datetime`, `status`) | N/A for merging. Mark slot `status` as 'booked'. If a service spans multiple slots, mark all relevant slots.                      | Simpler queries for available slots. Can be easier to visualize.                             | \"Show me all available slots for Dr. `X` on `YYYY-MM-DD`.\"                  | Large number of records, updating all slots if schedule changes, less flexible for ad-hoc service durations. |\n| **Salons (Specific Stylist)**  | Non-Fungible (Specific Person)                 | Time Slot                | **Define Working Schedules + Store Bookings (as Unavailability)** OR **Pre-generate Slots** | Same as Telehealth.                                                                                                                  | Same as Telehealth.                                                                        | \"What times is Stylist `S` free on `date` for a 60-min service?\"          | As Telehealth; also managing specific equipment/room needed for a service.                                  |\n| **Meeting Rooms (Specific Room)**| Non-Fungible (Specific Space)                  | Time Slot / Hourly       | **Define Operating Hours + Store Bookings (as Unavailability)** OR **Pre-generate Slots** | Same as Telehealth.                                                                                                                  | Same as Telehealth.                                                                        | \"Is Room `A` available on `date` from `time1` to `time2`?\"                  | Recurring meetings, setup/teardown time, capacity limits, equipment availability within the room.                 |\n| **General Pool (e.g., any available doctor for urgent care)** | Fungible Resource Pool | Time Slot | **Aggregated Slot Availability (derived from individual provider slots)** OR **Pooled Inventory per Slot** | N/A for merging ranges. Logic to find *any* available provider slot.                                                                    | Allows booking with any available resource from a group.                                   | \"Is there any doctor available for a 15-min call at 3 PM today?\"           | Assigning the booking to a specific provider, ensuring load balancing, complex if providers have different skills. |\n\n**Key Takeaways on Merging/Splitting:**\n\n*   **\"Store Unavailability Ranges\" Strategy (Common for Non-Fungible, Range-Based):**\n    *   You don't typically \"merge availability.\"\n    *   You manage distinct unavailability records (bookings, blocks).\n    *   To find availability, you look for gaps *between* these unavailability records.\n*   **\"Store Availability Ranges\" Strategy (Less Common, but possible for Non-Fungible, Range-Based):**\n    *   **Merging is CRUCIAL here.** When a host makes day 16 available, and days 1-15 and 17-30 were already available, you *must* merge these into a single 1-30 available range.\n    *   Similarly, if a booking (unavailability) is made in the middle of an available range, that available range needs to be *split*.\n*   **\"Store Daily Inventory Counts\" Strategy (Common for Fungible, Range-Based):**\n    *   Merging is not applicable in the same way. You simply adjust counts for each day.\n*   **\"Slot-Based\" Strategies (Pre-generated or Calculated):**\n    *   Merging ranges is generally not the core mechanism.\n    *   If pre-generating slots: You mark individual slots as booked/available.\n    *   If calculating on-the-fly: You derive available slots from schedules minus bookings. A single booking might make a sequence of conceptual \"mini-slots\" unavailable.\n\nChoosing the right strategy depends heavily on whether the resource is unique (non-fungible) or one of many identical items (fungible), and the granularity at which users perceive and book availability.","x":-1200,"y":2960,"width":2528,"height":1267},
		{"id":"b897272b1ea9aaad","type":"text","text":"# Data Model\n## AvailableRanges Table\n\n| property_id | host_id | start      | end        |\n| :---------- | :------ | ---------- | ---------- |\n| 101         | user_1  | 01/01/2025 | 01/15/2025 |\n| 101         | user_1  | 01/25/2025 | 02/02/2025 |\n\n## Bookings Table\n\n| booking_id | property_id | guest_id | start      | end        | status  | approval_by |\n| ---------- | ----------- | -------- | ---------- | ---------- | ------- | ----------- |\n| 201        | 101         | user_2   | 01/01/2025 | 01/03/2025 | PENDING |             |\n| 202        | 101         | user_3   | 01/05/2025 | 01/14/2025 | BOOKED  | user_1      |\n\n\n","x":-1081,"y":1680,"width":780,"height":500},
		{"id":"140e1dc3649dee2b","type":"text","text":"# Data Model\n## AvailableSlots Table\n\n| slot_id | provider_id | date       | time_start | duration |\n| :------ | :---------- | ---------- | ---------- | -------- |\n| 101     | user_1      | 01/01/2025 | 10:00 AM   | 60       |\n| 102     | user_1      | 01/01/2025 | 11:00 AM   | 60       |\n\n\n## Bookings Table\n\n| booking_id | slot_id | member_id | status  | approval_by |\n| ---------- | ------- | --------- | ------- | ----------- |\n| 201        | 101     | user_2    | PENDING |             |\n| 202        | 101     | user_3    | BOOKED  | user_1      |\n\n\n","x":185,"y":1680,"width":520,"height":500},
		{"id":"d4e9efc2895869c8","type":"text","text":"- Slots can be double booked by multiple people, but only approved for one of them","x":820,"y":2040,"width":475,"height":96}
	],
	"edges":[
		{"id":"66c4aa50f07e16fd","fromNode":"d079fdf874013b12","fromSide":"bottom","toNode":"a3f47a8673c65b41","toSide":"top"},
		{"id":"0c0d80dad3b7f4da","fromNode":"d079fdf874013b12","fromSide":"bottom","toNode":"af9902203e41e833","toSide":"top"},
		{"id":"e6b41b2a8f90988a","fromNode":"a3f47a8673c65b41","fromSide":"bottom","toNode":"b897272b1ea9aaad","toSide":"top"},
		{"id":"c610b7562ea05d35","fromNode":"b897272b1ea9aaad","fromSide":"bottom","toNode":"206bdf1846fc79aa","toSide":"top"},
		{"id":"114538e3cd3ed14c","fromNode":"af9902203e41e833","fromSide":"bottom","toNode":"140e1dc3649dee2b","toSide":"top"},
		{"id":"53a69335dae4e724","fromNode":"140e1dc3649dee2b","fromSide":"right","toNode":"d4e9efc2895869c8","toSide":"left"},
		{"id":"d0f89597ae7e4dcb","fromNode":"140e1dc3649dee2b","fromSide":"bottom","toNode":"fbfa7de512c517c9","toSide":"top"},
		{"id":"5dc6d29da8634d7d","fromNode":"206bdf1846fc79aa","fromSide":"bottom","toNode":"fbfa7de512c517c9","toSide":"top"}
	]
}